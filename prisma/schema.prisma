// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Vendor Model
model Vendor {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  phone_number        String
  role                Role     @default(Vendor)
  business_logo       String?
  address             String
  business_name       String
  business_category   String
  registration_number String
  email_verify        Boolean  @default(false)
  business_verify     Boolean  @default(false)
  isActive            Boolean  @default(true)
  failedLoginAttempts Int      @default(0)
  business_url        String?
  facebook_url        String?
  reset_token         String?
  reset_expiration    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  events              Event[]

  @@map("vendor")
}

// User Model
model User {
  id                  String           @id @default(cuid())
  profile_picture     String?
  name                String
  email               String           @unique
  phone_number        String?
  address             String?
  password            String
  role                Role             @default(User)
  guardian_type       String?
  email_verify        Boolean          @default(false)
  isActive            Boolean          @default(true)
  failedLoginAttempts Int              @default(0)
  reset_token         String?
  reset_expiration    String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  favorites           Favorite[]
  bookings            Booking[]
  payments            Payment[]
  notifications       Notification[]
  recommendation      Recommendation[]

  @@map("user")
}

// Event Model
model Event {
  id              String           @id @default(cuid())
  name            String
  description     String
  address         String
  images          String?
  price           Decimal
  total_ticket    Int
  date            DateTime
  time            String
  age_range       String
  instruction     String?
  category        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  vendorId        String?
  adminId         String?
  vendor          Vendor?          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  admin           Admin?           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  reviews         Review[]
  bookings        Booking[]
  favorites       Favorite[]
  recommendations Recommendation[]

  @@map("event")
}

// Bookings Model
model Booking {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId         String
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket_quantity Int
  status          BookingStatus @default(Pending)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payment         Payment[]

  @@map("booking")
}

// Payment Model
model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  status        PaymentStatus @default(Pending)
  paymentMethod String
  transactionId String?
  invoiceUrl    String?
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payment")
}

// Favourite Model
model Favorite {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favorite")
}

// Recommendation Model
model Recommendation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  reason    String // e.g., "similar to favorites", "nearby"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recommendation")
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "event_reminder", "booking_confirmation"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review Model
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

// Admin Model
model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      Role     @default(Admin)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("admin")
}

// BlacklistedToken Model
model BlacklistedToken {
  id            String   @id @default(cuid())
  access_token  String
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blacklisted_token")
}

// Role Enumerator
enum Role {
  Admin
  Vendor
  User
}

// Booking Status Enumerator
enum BookingStatus {
  Pending
  Confirmed
  Cancelled
}

// Payment Status Enumerator
enum PaymentStatus {
  Pending
  Completed
  Failed
}
