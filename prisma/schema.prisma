generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                            String            @id @default(cuid())
  first_name                    String
  last_name                     String
  email                         String            @unique
  password                      String
  email_verify                  Boolean           @default(false)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime          @default(now())
  updatedAt                     DateTime          @updatedAt
  fcmToken                      String?
  role                          Role              @default(ADMIN)
  fcmIsOn                       Boolean           @default(false)
  activationStatus              ActivationStatus  @default(PENDING)
  isDeleted                     Boolean           @default(false)
  permissions                   AdminPermission[]
  events                        Event[]

  @@index([email])
  @@map("admin")
}

model AdminPermission {
  id        String  @id @default(cuid())
  adminId   String
  module    String
  canCreate Boolean @default(false)
  canView   Boolean @default(false)
  canManage Boolean @default(false)
  canDelete Boolean @default(false)
  admin     Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, module])
}

model Organiser {
  id                            String   @id @default(cuid())
  name                          String
  email                         String   @unique
  password                      String
  phone_number                  String
  business_logo                 String?
  paymentAccountId              String?
  address                       String
  business_name                 String   @unique
  business_category             String
  registration_number           String
  email_verify                  Boolean  @default(true)
  isLocked                      Boolean  @default(false)
  isDeleted                     Boolean  @default(false)
  isVerified                    Boolean  @default(true)
  failedLoginAttempts           Int      @default(0)
  website_url                   String?
  facebook_url                  String?
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  fcmToken                      String?
  role                          Role     @default(ORGANISER)
  fcmIsOn                       Boolean  @default(false)
  isApproved                    Boolean  @default(false)
  events                        Event[]

  @@index([email])
  @@map("organiser")
}

model User {
  id                            String           @id @default(cuid())
  profile_picture               String?
  name                          String
  email                         String           @unique
  phone_number                  String?
  address                       String?
  password                      String
  guardian_type                 String?
  email_verify                  Boolean          @default(false)
  isLocked                      Boolean          @default(false)
  isDeleted                     Boolean          @default(false)
  failedLoginAttempts           Int              @default(0)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  fcmToken                      String?
  role                          Role             @default(GUARDIAN)
  fcmIsOn                       Boolean          @default(false)
  bookings                      Booking[]
  comment                       Comment[]
  crowdSource                   CrowdSource[]
  favorites                     Favorite[]
  like                          Like[]
  recommendation                Recommendation[]

  @@index([email])
  @@map("user")
}

model Event {
  id              String           @id @default(cuid())
  name            String
  description     String
  address         String
  images          String?
  price           Decimal
  total_ticket    Int
  ticket_booked   Int              @default(0)
  date            DateTime
  time            String
  age_range       String
  instruction     String?
  category        String
  isPublished     Boolean?         @default(false)
  isDeleted       Boolean?         @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  adminId         String?
  organiserId     String?
  bookings        Booking[]
  admin           Admin?           @relation(fields: [adminId], references: [id])
  organiser       Organiser?       @relation(fields: [organiserId], references: [id])
  favorites       Favorite?
  like            Like[]
  recommendations Recommendation[]
  reviews         Review[]

  @@index([category, isPublished, age_range])
  @@map("event")
}

model CrowdSource {
  id          String    @id @default(cuid())
  name        String
  images      String[]
  description String
  address     String
  creatorId   String
  isVerified  Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  date        DateTime?
  fee         Decimal
  tag         Tag       @default(Place)
  time        String?
  tips        String?
  isPublished Boolean   @default(false)
  category    String
  facilities  String[]
  comment     Comment[]
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  like        Like[]

  @@index([address, isVerified])
  @@map("crowdsource")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  eventId         String
  ticket_quantity Int
  sessionId       String?
  status          BookingStatus @default(Pending)
  isDeleted       Boolean?      @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  consent         Consent[]
  payment_intent  String?

  @@index([userId, eventId, sessionId, status])
  @@map("booking")
}

model Consent {
  id        String   @id @default(cuid())
  name      String
  age       Int
  notes     String
  consent   Boolean
  bookingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("consent")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorite")
}

model Like {
  id            String       @id @default(cuid())
  userId        String
  eventId       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  crowdSourceId String?
  commentId     String?
  reviewId      String?
  comment       Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  crowdSource   CrowdSource? @relation(fields: [crowdSourceId], references: [id], onDelete: Cascade)
  event         Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  review        Review?      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@unique([userId, crowdSourceId])
  @@unique([userId, commentId])
  @@unique([userId, reviewId])
  @@map("like")
}

model Recommendation {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation")
}

model Comment {
  id            String       @id @default(cuid())
  content       String
  userId        String
  crowdSourceId String?
  parentId      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  crowdSource   CrowdSource? @relation(fields: [crowdSourceId], references: [id])
  parent        Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[]    @relation("CommentReplies")
  user          User         @relation(fields: [userId], references: [id])
  like          Like[]

  @@index([crowdSourceId])
  @@map("comment")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  like      Like[]
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([rating])
  @@map("review")
}

model BlacklistedToken {
  id            String   @id @default(cuid())
  access_token  String
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blacklisted_token")
}

enum Role {
  ADMIN
  ORGANISER
  GUARDIAN
}

enum BookingStatus {
  Pending
  Confirmed
  Failed
  Cancelled
  Refunded
}

enum Tag {
  Event
  Place
}

enum ActivationStatus {
  PENDING
  ACTIVE
  INACTIVE
}
