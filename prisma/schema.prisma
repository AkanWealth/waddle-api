// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activities {
  id           String       @id @default(cuid())
  name         String
  description  String
  address      String
  images       String
  price        Decimal
  total_ticket Int
  date         String
  time         String
  age_range    String
  instruction  String
  collection   Collection[]
  booking      Booking[]
  Vendor       Vendor?      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("activities")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(Admin)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Vendor {
  id                  String       @id @default(cuid())
  name                String
  email               String       @unique
  password            String
  phone_number        String
  business_logo       String?
  address             String
  business_name       String
  business_category   String
  registration_number String
  role                Role         @default(Vendor)
  email_verify        Boolean      @default(false)
  business_verify     Boolean      @default(false)
  isActive            Boolean      @default(true)
  failedLoginAttempts Int          @default(0)
  business_url        String?
  facebook_url        String?
  reset_token         String?
  reset_expiration    String?
  activities          Activities[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@map("vendors")
}

model User {
  id                  String       @id @default(cuid())
  profile_picture     String?
  name                String
  email               String       @unique
  phone_number        String?
  address             String?
  password            String
  guardian_type       String?
  role                Role         @default(Customer)
  collection          Collection[]
  booking             Booking[]
  email_verify        Boolean      @default(false)
  isActive            Boolean      @default(true)
  failedLoginAttempts Int          @default(0)
  reset_token         String?
  reset_expiration    String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  Invoice             Invoice[]

  @@map("users")
}

model Collection {
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activitiesId String
  activities   Activities @relation(fields: [activitiesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

model Booking {
  id           String     @id @default(cuid())
  start_date   String
  end_date     String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activitiesId String
  activities   Activities @relation(fields: [activitiesId], references: [id], onDelete: Cascade)
  status       Status     @default(Pending)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@map("bookings")
}

model Invoice {
  id        String  @id @default(cuid())
  amount    Decimal
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  status    Payment @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model BlacklistedToken {
  id            String   @id @default(cuid())
  access_token  String
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blacklisted_token")
}

enum Role {
  Admin
  Vendor
  Customer
}

enum Status {
  Pending
  Confirmed
  Cancelled
}

enum Payment {
  Pending
  Paid
  Failed
}
