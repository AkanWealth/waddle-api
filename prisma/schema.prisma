// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin Model
model Admin {
  id                            String    @id @default(cuid())
  first_name                    String
  last_name                     String
  email                         String    @unique
  role                          AdminRole @default(Editor)
  password                      String
  email_verify                  Boolean   @default(false)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  events                        Event[]

  @@map("admin")
}

// Vendor Model
model Vendor {
  id                            String        @id @default(cuid())
  name                          String
  email                         String        @unique
  password                      String
  phone_number                  String
  role                          VendorRole    @default(Vendor)
  business_logo                 String?
  address                       String
  business_name                 String        @unique
  business_category             String
  registration_number           String
  email_verify                  Boolean       @default(true)
  isLocked                      Boolean       @default(false)
  isDeleted                     Boolean       @default(false)
  isVerified                    Boolean       @default(true)
  failedLoginAttempts           Int           @default(0)
  website_url                   String?
  facebook_url                  String?
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  staffs                        VendorStaff[]
  events                        Event[]

  @@map("vendor")
}

// VendorStaff Model
model VendorStaff {
  id                            String     @id @default(cuid())
  name                          String
  email                         String     @unique
  password                      String
  phone_number                  String
  role                          VendorRole @default(Representative)
  email_verify                  Boolean    @default(true)
  isLocked                      Boolean    @default(false)
  isDeleted                     Boolean    @default(false)
  failedLoginAttempts           Int        @default(0)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  vendorId                      String
  vendor                        Vendor     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  events                        Event[]

  @@map("vendorstaff")
}

// User Model
model User {
  id                            String           @id @default(cuid())
  profile_picture               String?
  name                          String
  email                         String           @unique
  phone_number                  String?
  address                       String?
  password                      String
  guardian_type                 String?
  email_verify                  Boolean          @default(false)
  isLocked                      Boolean          @default(false)
  isDeleted                     Boolean          @default(false)
  failedLoginAttempts           Int              @default(0)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  favorites                     Favorite[]
  bookings                      Booking[]
  payments                      Payment[]
  notifications                 Notification[]
  recommendation                Recommendation[]
  like                          Like[]

  @@map("user")
}

// Event Model
model Event {
  id              String           @id @default(cuid())
  name            String
  description     String
  address         String
  images          String?
  price           Decimal
  total_ticket    Int
  ticket_booked   Int              @default(0)
  date            DateTime
  time            String
  age_range       String
  instruction     String?
  category        String
  isPublished     Boolean?         @default(false)
  isDeleted       Boolean?         @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creatorId       String
  creatorType      String
  reviews         Review[]
  bookings        Booking[]
  favorites       Favorite?
  recommendations Recommendation[]
  like            Like?
  Admin           Admin?           @relation(fields: [adminId], references: [id])
  adminId         String?
  Vendor          Vendor?          @relation(fields: [vendorId], references: [id])
  vendorId        String?
  VendorStaff     VendorStaff?     @relation(fields: [vendorStaffId], references: [id])
  vendorStaffId   String?

  @@map("event")
}

// Bookings Model
model Booking {
  id              String        @id @default(cuid())
  userId          String
  eventId         String
  ticket_quantity Int
  sessionId       String?
  status          BookingStatus @default(Pending)
  isDeleted       Boolean?      @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payment         Payment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("booking")
}

// Payment Model
model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  paymentMethod String
  transactionId String?
  invoiceUrl    String?
  status        PaymentStatus @default(Pending)
  isDeleted     Boolean?      @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  bookingId     String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payment")
}

// Favourite Model
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("favorite")
}

// Like model
model Like {
  id        String   @id @default(cuid())
  userId    String
  eventId   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("like")
}

// Recommendation Model
model Recommendation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  reason    String // e.g., "similar to favorites", "nearby"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recommendation")
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "event_reminder", "booking_confirmation"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review Model
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("review")
}

// BlacklistedToken Model
model BlacklistedToken {
  id            String   @id @default(cuid())
  access_token  String
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blacklisted_token")
}

// AdminRole Enumerator
enum AdminRole {
  Admin
  Editor
  Viewer
}

// VendorRole Enumerator
enum VendorRole {
  Vendor
  Representative
  Support
}

// Booking Status Enumerator
enum BookingStatus {
  Pending
  Confirmed
  Failed
  Cancelled
  Refunded
}

// Payment Status Enumerator
enum PaymentStatus {
  Pending
  Completed
  Failed
}
