generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                            String                    @id @default(dbgenerated("generate_unique_id('admin'::text, 'ADM-'::text)"))
  first_name                    String
  last_name                     String
  email                         String                    @unique
  password                      String
  email_verify                  Boolean                   @default(false)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @updatedAt
  fcmToken                      String?
  role                          Role                      @default(ADMIN)
  fcmIsOn                       Boolean                   @default(false)
  activationStatus              ActivationStatus          @default(PENDING)
  isDeleted                     Boolean                   @default(false)
  avatarUrl                     String?
  adminNotificationStatuses     AdminNotificationStatus[]
  permissions                   AdminPermission[]
  events                        Event[]

  @@index([email])
  @@map("admin")
}

model AdminPermission {
  id        String  @id @default(dbgenerated("generate_unique_id('adminpermission'::text, 'PRM-'::text)"))
  adminId   String
  module    String
  canCreate Boolean @default(false)
  canView   Boolean @default(false)
  canManage Boolean @default(false)
  canDelete Boolean @default(false)
  admin     Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, module])
  @@map("adminpermission")
}

model Organiser {
  id                            String           @id @default(dbgenerated("generate_unique_id('organiser'::text, 'ORG-'::text)"))
  name                          String?
  email                         String           @unique
  password                      String
  phone_number                  String?
  business_logo                 String?
  address                       String?
  business_name                 String?
  registration_number           String?
  email_verify                  Boolean          @default(false)
  isLocked                      Boolean          @default(false)
  isDeleted                     Boolean          @default(false)
  isVerified                    Boolean          @default(false)
  failedLoginAttempts           Int              @default(0)
  website_url                   String?
  business_url                  String?
  facebook_url                  String?
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  fcmToken                      String?
  role                          Role             @default(ORGANISER)
  fcmIsOn                       Boolean          @default(false)
  isApproved                    Boolean          @default(false)
  lastLoginAt                   DateTime?        @db.Timestamp(6)
  stripe_account_id             String?
  is_stripe_connected           Boolean          @default(false)
  attachment                    String?
  description                   String?
  isProfileCompleted            Boolean          @default(false)
  status                        String           @default("PENDING")
  suspensionReason              String?
  rejectionReason               String?
  disputes                      Dispute[]
  events                        Event[]
  notifications                 Notification[]   @relation("OrganiserNotifications")
  RecentActivity                RecentActivity[]

  @@index([email])
  @@map("organiser")
}

model User {
  id                            String                  @id @default(cuid())
  profile_picture               String?
  name                          String
  email                         String                  @unique
  phone_number                  String?
  address                       String?
  password                      String
  guardian_type                 String?
  email_verify                  Boolean                 @default(false)
  isLocked                      Boolean                 @default(false)
  isDeleted                     Boolean                 @default(false)
  failedLoginAttempts           Int                     @default(0)
  verification_token            String?
  verification_token_expiration String?
  reset_token                   String?
  reset_expiration              String?
  createdAt                     DateTime                @default(now())
  updatedAt                     DateTime                @updatedAt
  fcmToken                      String?
  role                          Role                    @default(GUARDIAN)
  fcmIsOn                       Boolean                 @default(false)
  bookings                      Booking[]
  comment                       Comment[]
  crowdSource                   CrowdSource[]
  crowdSourceAttendances        CrowdSourceAttendance[]
  crowdSourceReviews            CrowdSourceReview[]
  disputes                      Dispute[]               @relation("CustomerDisputes")
  favorites                     Favorite[]
  like                          Like[]
  notifications                 Notification[]          @relation("UserNotifications")
  payments                      Payment[]
  recommendation                Recommendation[]

  @@index([email])
  @@map("user")
}

model Event {
  id              String           @id @default(dbgenerated("generate_unique_id('event'::text, 'EVT-'::text)"))
  name            String?
  description     String?
  address         String?
  price           Decimal?
  total_ticket    Int?
  isUnlimited     Boolean          @default(false)
  ticket_booked   Int              @default(0)
  date            DateTime?
  time            String?
  age_range       String?
  instructions    String[]
  category        String?
  distance        Int?
  facilities      String[]
  tags            String[]
  eventType       EventType?
  status          String?          @default("PENDING")
  rejectionReason String?
  files           String[]
  isPublished     Boolean?         @default(false)
  isDeleted       Boolean?         @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  adminId         String?
  organiserId     String?
  bookings        Booking[]
  disputes        Dispute[]
  admin           Admin?           @relation(fields: [adminId], references: [id])
  organiser       Organiser?       @relation(fields: [organiserId], references: [id])
  favorites       Favorite?
  like            Like[]
  payments        Payment[]
  recommendations Recommendation[]
  reviews         Review[]

  @@index([category, isPublished, age_range])
  @@map("event")
}

model CrowdSource {
  id          String                  @id @default(cuid())
  name        String
  images      String[]
  description String
  address     String
  creatorId   String
  isVerified  Boolean                 @default(false)
  isDeleted   Boolean                 @default(false)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  date        DateTime?
  isFree      Boolean                 @default(false)
  tag         Tag                     @default(Place)
  time        String?
  tips        String?
  isPublished Boolean                 @default(false)
  category    String
  facilities  String[]
  status      CrowdSourceStatus       @default(PENDING)
  comment     Comment[]
  creator     User                    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  attendances CrowdSourceAttendance[]
  reviews     CrowdSourceReview[]
  like        Like[]

  @@index([address, isVerified])
  @@map("crowdsource")
}

model CrowdSourceAttendance {
  id            String      @id @default(dbgenerated("generate_unique_id('crowdsource_attendance'::text, 'ATD-'::text)"))
  userId        String
  crowdSourceId String
  going         String      @default("PENDING")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  crowdSource   CrowdSource @relation(fields: [crowdSourceId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, crowdSourceId])
  @@index([crowdSourceId, going])
  @@map("crowdsource_attendance")
}

model CrowdSourceReview {
  id              String        @id @default(dbgenerated("generate_unique_id('crowdsource_review'::text, 'CRV-'::text)"))
  userId          String
  crowdSourceId   String
  rating          Int?
  status          CommentStatus @default(PENDING)
  comment         String?
  would_recommend Boolean       @default(false)
  verified        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  crowdSource     CrowdSource   @relation(fields: [crowdSourceId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes           Like[]

  @@unique([userId, crowdSourceId])
  @@index([crowdSourceId, rating])
  @@map("crowdsource_review")
}

model Booking {
  id              String        @id @default(dbgenerated("generate_unique_id('booking'::text, 'BKG-'::text)"))
  userId          String
  eventId         String
  ticket_quantity Int
  sessionId       String?
  status          BookingStatus @default(Pending)
  isDeleted       Boolean?      @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payment_intent  String?
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  consent         Consent[]
  disputes        Dispute[]
  payments        Payment[]

  @@index([userId, eventId, sessionId, status])
  @@map("booking")
}

model Consent {
  id        String   @id @default(dbgenerated("generate_unique_id('consent'::text, 'CNS-'::text)"))
  name      String
  age       Int
  notes     String
  consent   Boolean
  bookingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("consent")
}

model Favorite {
  id        String   @id @default(dbgenerated("generate_unique_id('favorite'::text, 'FAV-'::text)"))
  userId    String
  eventId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorite")
}

model Like {
  id                  String             @id @default(cuid())
  userId              String
  eventId             String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  crowdSourceId       String?
  commentId           String?
  reviewId            String?
  crowdSourceReviewId String?
  comment             Comment?           @relation(fields: [commentId], references: [id], onDelete: Cascade)
  crowdSource         CrowdSource?       @relation(fields: [crowdSourceId], references: [id], onDelete: Cascade)
  crowdSourceReview   CrowdSourceReview? @relation(fields: [crowdSourceReviewId], references: [id], onDelete: Cascade)
  event               Event?             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  review              Review?            @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@unique([userId, crowdSourceId])
  @@unique([userId, commentId])
  @@unique([userId, reviewId])
  @@unique([userId, crowdSourceReviewId])
  @@map("like")
}

model Recommendation {
  id        String   @id @default(dbgenerated("generate_unique_id('recommendation'::text, 'REC-'::text)"))
  userId    String
  eventId   String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation")
}

model Comment {
  id            String        @id @default(dbgenerated("generate_unique_id('comment'::text, 'CMT-'::text)"))
  content       String
  userId        String
  crowdSourceId String?
  parentId      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        CommentStatus @default(PENDING)

  crowdSource CrowdSource? @relation(fields: [crowdSourceId], references: [id])
  parent      Comment?     @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]    @relation("CommentReplies")
  user        User         @relation(fields: [userId], references: [id])
  like        Like[]

  @@index([crowdSourceId])
  @@map("comment")
}

model Review {
  id        String   @id @default(dbgenerated("generate_unique_id('review'::text, 'REV-'::text)"))
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  like      Like[]
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([rating])
  @@map("review")
}

model BlacklistedToken {
  id            String   @id @default(dbgenerated("generate_unique_id('blacklisted_token'::text, 'BLT-'::text)"))
  access_token  String
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("blacklisted_token")
}

model Notification {
  id                 String     @id @default(dbgenerated("generate_unique_id('notification'::text, 'NOT-'::text)"))
  title              String
  body               String
  userId             String?
  organiserId        String?
  isRead             Boolean    @default(false)
  visibleToAdmins    Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  organiserRecipient Organiser? @relation("OrganiserNotifications", fields: [organiserId], references: [id], onDelete: Cascade)
  userRecipient      User?      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organiserId])
  @@map("notification")
}

model AdminNotification {
  id           String                    @id @default(dbgenerated("generate_unique_id('admin_notification'::text, 'ANT-'::text)"))
  title        String
  body         String
  type         String?
  data         Json?
  isDeleted    Boolean                   @default(false)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  readStatuses AdminNotificationStatus[]

  @@index([createdAt])
  @@map("admin_notification")
}

model AdminNotificationStatus {
  id                  String            @id @default(dbgenerated("generate_unique_id('admin_notification_status'::text, 'ANS-'::text)"))
  adminId             String
  adminNotificationId String
  isRead              Boolean           @default(false)
  isVisible           Boolean           @default(true)
  isCleared           Boolean           @default(false)
  isDeleted           Boolean           @default(false)
  readAt              DateTime?
  clearedAt           DateTime?
  deletedAt           DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  admin               Admin             @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminNotification   AdminNotification @relation(fields: [adminNotificationId], references: [id], onDelete: Cascade)

  @@unique([adminId, adminNotificationId])
  @@index([adminId, isRead, isCleared, isDeleted])
  @@map("admin_notification_status")
}

model Dispute {
  id            String          @id @default(dbgenerated("generate_unique_id('dispute'::text, 'DSP-'::text)"))
  category      DisputeCategory
  reason        String
  vendorId      String
  customerId    String
  eventId       String
  bookingRef    String
  refundRequest String?
  description   String
  file          String?
  status        DisputeStatus   @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  booking       Booking         @relation(fields: [bookingRef], references: [id])
  customer      User            @relation("CustomerDisputes", fields: [customerId], references: [id])
  event         Event           @relation(fields: [eventId], references: [id])
  vendor        Organiser       @relation(fields: [vendorId], references: [id])

  @@map("dispute")
}

model Payment {
  id            String        @id @default(dbgenerated("generate_unique_id('payment'::text, 'PAY-'::text)"))
  transactionId String        @unique
  bookingId     String
  userId        String
  eventId       String
  username      String
  eventName     String
  amount        Decimal
  status        PaymentStatus @default(PENDING)
  method        String
  processingFee Decimal
  netAmount     Decimal
  amountPaid    Decimal
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  refundId      String?
  refundStatus  String?
  booking       Booking       @relation(fields: [bookingId], references: [id])
  event         Event         @relation(fields: [eventId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@map("payment")
}

model RecentActivity {
  id          String             @id @default(cuid())
  organiserId String
  type        RecentActivityType
  title       String
  amount      Decimal?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  organiser Organiser? @relation(fields: [organiserId], references: [id])
}

enum RecentActivityType {
  ORDER
  PAYMENT
  CANCELLED
}

enum Role {
  EDITOR
  ADMIN
  ORGANISER
  GUARDIAN
}

enum BookingStatus {
  Pending
  Confirmed
  Failed
  Cancelled
  Refunded
}

enum Tag {
  Event
  Place
}

enum ActivationStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum EventType {
  INDOOR
  OUTDOOR
}

enum DisputeCategory {
  PAYMENT
  SERVICE
  TECHNICAL
}

enum DisputeStatus {
  PENDING
  IN_REVIEW
  RESOLVED
}

enum PaymentStatus {
  PENDING
  CANCELLED
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum CrowdSourceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RecipientType {
  ORGANISER
  USER
}

enum CommentStatus {
  PENDING
  APPROPRIATE
  INAPPROPRIATE
}
